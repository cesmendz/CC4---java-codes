import java.util.Scanner;

class Node {
    String data; 
    Node left, right;

    public Node(String item) {
        data = item;
        left = right = null;
    }
}

class BinaryTree {
    Node root;

    // Pre-order traversal
    void preOrder(Node node) {
        if (node == null) {
            return;
        }
        System.out.print(node.data + " ");
        preOrder(node.left);
        preOrder(node.right);
    }

    // In-order traversal
    void inOrder(Node node) {
        if (node == null) {
            return;
        }
        inOrder(node.left);
        System.out.print(node.data + " ");
        inOrder(node.right);
    }

    // Post-order traversal
    void postOrder(Node node) {
        if (node == null) {
            return;
        }
        postOrder(node.left);
        postOrder(node.right);
        System.out.print(node.data + " ");
    }

    // Method to insert a new node in the binary tree
    Node insert(Node node, String data) {
        if (node == null) {
            return new Node(data);
        }
        // Compare strings lexicographically
        if (data.compareTo(node.data) < 0) {
            node.left = insert(node.left, data);
        } else if (data.compareTo(node.data) > 0) {
            node.right = insert(node.right, data);
        }
        return node;
    }
}

public class Main {
    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the number of NODES you want to insert:");
        int n = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character

        System.out.println("Enter the values of the nodes (NUMBERS or LETTERS):");
        for (int i = 0; i < n; i++) {
            String value = scanner.nextLine(); // Read a string input
            tree.root = tree.insert(tree.root, value);
        }

        System.out.println("\nPre-order traversal:");
        tree.preOrder(tree.root);
        
        System.out.println("\nIn-order traversal:");
        tree.inOrder(tree.root);
        
        System.out.println("\nPost-order traversal:");
        tree.postOrder(tree.root);

        scanner.close();
    }
}

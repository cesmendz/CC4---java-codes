import java.util.Scanner;

class SimpleStack {
    private int[] stack;
    private int top;
    private int maxSize;

    public SimpleStack(int size) {
        maxSize = size;
        stack = new int[maxSize];
        top = -1;
    }

    public void push(int value) {
        if (top < maxSize - 1) {
            stack[++top] = value;
            System.out.println("Pushed: " + value);
        } else {
            System.out.println("Stack is full.");
        }
    }

    public Integer pop() {
        if (top >= 0) {
            return stack[top--];
        } else {
            System.out.println("Stack is empty.");
            return null;
        }
    }

    public void print() {
        System.out.print("Stack contents: ");
        for (int i = 0; i <= top; i++) {
            System.out.print(stack[i] + " ");
        }
        System.out.println();
    }
}

class SimpleQueue {
    private int[] queue;
    private int front;
    private int rear;
    private int maxSize;

    public SimpleQueue(int size) {
        maxSize = size;
        queue = new int[maxSize];
        front = 0;
        rear = -1;
    }

    public void enqueue(int value) {
        if (rear < maxSize - 1) {
            queue[++rear] = value;
            System.out.println("Enqueued: " + value);
        } else {
            System.out.println("Queue is full.");
        }
    }

    public Integer dequeue() {
        if (front <= rear) {
            return queue[front++];
        } else {
            System.out.println("Queue is empty.");
            return null;
        }
    }

    public void print() {
        System.out.print("Queue contents: ");
        for (int i = front; i <= rear; i++) {
            System.out.print(queue[i] + " ");
        }
        System.out.println();
    }
}

public class StackQueueDemo {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Choose 1 for 'stack' or 2 for 'queue': ");
        int choice = scanner.nextInt();
        
        System.out.print("Enter the size of the data structure: ");
        int n = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        if (choice == 1) { // Stack
            SimpleStack stack = new SimpleStack(n);
            while (true) {
                System.out.print("Enter 1 for 'push' followed by integers (space-separated) or 2 for 'pop' (or 'end' to finish): ");
                String operation = scanner.nextLine().toLowerCase();
                
                if (operation.startsWith("1")) { // Push
                    String[] values = operation.substring(2).trim().split(" ");
                    for (String value : values) {
                        try {
                            stack.push(Integer.parseInt(value));
                        } catch (NumberFormatException e) {
                            System.out.println("Invalid integer: " + value);
                        }
                    }
                } else if (operation.equals("2")) { // Pop
                    Integer poppedValue = stack.pop();
                    if (poppedValue != null) {
                        System.out.println("Popped: " + poppedValue);
                    }
                } else if (operation.equals("end")) {
                    break;
                } else {
                    System.out.println("Invalid operation.");
                }
            }
            stack.print();
        } else if (choice == 2) { // Queue
            SimpleQueue queue = new SimpleQueue(n);
            while (true) {
                System.out.print("Enter 1 for 'enqueue' followed by integers (space-separated) or 2 for 'dequeue' (or 'end' to finish): ");
                String operation = scanner.nextLine().toLowerCase();
                
                if (operation.startsWith("1")) { // Enqueue
                    String[] values = operation.substring(2).trim().split(" ");
                    for (String value : values) {
                        try {
                            queue.enqueue(Integer.parseInt(value));
                        } catch (NumberFormatException e) {
                            System.out.println("Invalid integer: " + value);
                        }
                    }
                } else if (operation.equals("2")) { // Dequeue
                    Integer dequeuedValue = queue.dequeue();
                    if (dequeuedValue != null) {
                        System.out.println("Dequeued: " + dequeuedValue);
                    }
                } else if (operation.equals("end")) {
                    break;
 } else {
                    System.out.println("Invalid operation.");
                }
            }
            queue.print();
        } else {
            System.out.println("Invalid choice.");
        }
        
        scanner.close();
    }
}

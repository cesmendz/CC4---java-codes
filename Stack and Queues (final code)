import java.util.Scanner;

class SimpleStack<T> {
    private T[] stack;
    private int top;
    private int maxSize;

    @SuppressWarnings("unchecked")
    public SimpleStack(int size) {
        maxSize = size;
        stack = (T[]) new Object[maxSize]; // Use generics for type safety
        top = -1;
    }

    public void push(T value) {
        if (top < maxSize - 1) {
            stack[++top] = value;
            System.out.println("Pushed: " + value);
        } else {
            System.out.println("Stack is full.");
        }
    }

    public T pop() {
        if (top >= 0) {
            return stack[top--];
        } else {
            System.out.println("Stack is empty.");
            return null;
        }
    }

    public void print() {
        System.out.print("Stack contents: ");
        for (int i = 0; i <= top; i++) {
            System.out.print(stack[i] + " ");
        }
        System.out.println();
    }
}

class SimpleCircularQueue<T> {
    private T[] queue;
    private int front;
    private int rear;
    private int maxSize;

    @SuppressWarnings("unchecked")
    public SimpleCircularQueue(int size) {
        maxSize = size + 1; // Increase size by 1 to differentiate full and empty
        queue = (T[]) new Object[maxSize]; // Use generics for type safety
        front = 0;
        rear = 0;
    }

    public void enqueue(T value) {
        if ((rear + 1) % maxSize == front) {
            System.out.println("Queue is full.");
        } else {
            queue[rear] = value;
            rear = (rear + 1) % maxSize;
            System.out.println("Enqueued: " + value);
        }
    }

    public T dequeue() {
        if (front == rear) {
            System.out.println("Queue is empty.");
            return null;
        } else {
            T value = queue[front];
            front = (front + 1) % maxSize;
            return value;
        }
    }

    public void print() {
        System.out.print("Queue contents: ");
        for (int i = front; i != rear; i = (i + 1) % maxSize) {
            System.out.print(queue[i] + " ");
        }
        System.out.println();
    }
}

public class StackQueueDemo {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Choose 1 for 'stack' or 2 for 'queue': ");
        int choice = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        System.out.print("Enter the size of the data structure: ");
        int n = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        if (choice == 1) { // Stack
            SimpleStack<String> stack = new SimpleStack<>(n);
            while (true) {
                System.out.print("Enter 1 for 'push' followed by values (space-separated) or 2 for 'pop' (or 'end' to finish): ");
                String operation = scanner.nextLine().toLowerCase();

                if (operation.startsWith("1")) { // Push
                    String[] values = operation.substring(2).trim().split(" ");
                    for (String value : values) {
                        stack.push(value); // Push any type of value
                    }
                } else if (operation.equals("2")) { // Pop
                    String poppedValue = stack.pop();
                    if (poppedValue != null) {
                        System.out.println("Popped: " + poppedValue);
                    }
                } else if (operation.equals("end")) {
                    break;
                } else {
                    System.out.println("Invalid operation.");
                }
            }
            stack.print();
        } else if (choice == 2) { // Queue
            SimpleCircularQueue<String> queue = new SimpleCircularQueue<>(n);
            while (true) {
                System.out.print("Enter 1 for 'enqueue' followed by values (space-separated) or 2 for 'dequeue' (or 'end' to finish): ");
                String operation = scanner.nextLine().toLowerCase();

                if (operation.startsWith("1")) { // Enqueue
                    String[] values = operation.substring(2).trim().split(" ");
                    for (String value : values) {
                        queue.enqueue(value); // Enqueue any type of value
                    }
                } else if (operation.equals("2")) { // Dequeue
                    String dequeuedValue = queue.dequeue();
                    if (dequeuedValue != null) {
                        System.out.println("Dequeued: " + dequeuedValue);
                    }
                } else if (operation.equals("end")) {
                    break;
                } else {
                    System.out.println("Invalid operation.");
                }
            }
            queue.print();
        } else {
            System.out.println("Invalid choice.");
        }

        scanner.close();
    }
}

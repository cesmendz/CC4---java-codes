import java.util.Scanner; // Import the Scanner class for user input

public class ArrayAddressCalculator {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in); // Create a Scanner object for input

        // Input: Number of Dimensions
        System.out.print("Enter the number of Dimensions: ");
        int numDimensions = scanner.nextInt(); // Read the number of dimensions from user input

        // Input: Base or Alpha
        System.out.print("Enter the Base: ");
        int baseAddress = scanner.nextInt(); // Read the base address from user input

        // Input: Element Size
        System.out.print("Enter the size of each element: ");
        int elementSize = scanner.nextInt(); // Read the size of each element from user input

        // Input: Upper Bounds
        int[] upperBounds = new int[numDimensions]; // Create an array to hold upper bounds for each dimension
        for (int i = 0; i < numDimensions; i++) {
            System.out.print("Enter the Upper Bound for Dimension " + (i + 1) + ": ");
            upperBounds[i] = scanner.nextInt(); // Read the upper bound for each dimension
        }

        // Input: Target Element
        int[] targetElement = new int[numDimensions]; // Create an array to hold the target indices
        for (int i = 0; i < numDimensions; i++) {
            System.out.print("Enter the Index for Dimension " + (i + 1) + ": ");
            targetElement[i] = scanner.nextInt(); // Read the index for each dimension
        }

        // Calculate the address of the target element
        int address = calculateAddress(baseAddress, elementSize, upperBounds, targetElement);

        // Output the result
        System.out.println("The address of the target element is: " + address); // Print the calculated address
    }

    // Method to calculate the address of the target element
    private static int calculateAddress(int base, int elementSize, int[] upperBounds, int[] target) {
        int[] sizes = new int[upperBounds.length]; // Create an array to hold the sizes of each dimension
        sizes[upperBounds.length - 1] = 1; // The last dimension size is always 1

        // Calculate the sizes of each dimension
        for (int i = upperBounds.length - 2; i >= 0; i--) {
            sizes[i] = sizes[i + 1] * (upperBounds[i + 1] + 1); // Calculate the size for each dimension
        }

        // Calculate the offset based on the target indices
        int offset = 0; // Initialize offset to 0
        for (int i = 0; i < upperBounds.length; i++) {
            offset += target[i] * sizes[i]; // Calculate the offset for the target element
        }

        // Calculate the final address using the base address and the offset
        return base + (offset * elementSize); // Return the calculated address2
    }
}

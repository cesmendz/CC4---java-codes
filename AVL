import java.util.InputMismatchException;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

// Converts a string to an integer array
class stringToArray {
    public int[] stringToArr(String s) {
        String[] s1 = s.replaceAll("\\[", "").replaceAll("]", "").split(",");
        int[] arr = new int[s1.length];

        for (int i = 0; i < s1.length; i++) {
            arr[i] = Integer.parseInt(s1[i].trim());
        }
        return arr;
    }
}

// Node Class
class Node {
    int key, height;
    Node left, right;

    public Node(int item) {
        key = item;
        height = 1;
        left = right = null;
    }
}

// AVL Tree Class (with same delete algorithm you had)
class BinaryTree {
    Node root;

    public int height(Node node) {
        return node == null ? 0 : node.height;
    }

    public int getBalance(Node node) {
        return node == null ? 0 : height(node.left) - height(node.right);
    }

    public Node rightRotate(Node y) {
        Node x = y.left;
        Node T2 = x.right;

        x.right = y;
        y.left = T2;

        y.height = Math.max(height(y.left), height(y.right)) + 1;
        x.height = Math.max(height(x.left), height(x.right)) + 1;

        return x;
    }

    public Node leftRotate(Node x) {
        Node y = x.right;
        Node T2 = y.left;

        y.left = x;
        x.right = T2;

        x.height = Math.max(height(x.left), height(x.right)) + 1;
        y.height = Math.max(height(y.left), height(y.right)) + 1;

        return y;
    }

    // Insert with balancing
    public void insert(int key) {
        root = insertRec(root, key);
    }

    private Node insertRec(Node root, int key) {
        if (root == null) return new Node(key);

        if (key < root.key)
            root.left = insertRec(root.left, key);
        else if (key > root.key)
            root.right = insertRec(root.right, key);
        else
            return root; // Duplicate keys not allowed

        root.height = 1 + Math.max(height(root.left), height(root.right));
        int balance = getBalance(root);

        // Balancing
        if (balance > 1 && key < root.left.key)
            return rightRotate(root);
        if (balance < -1 && key > root.right.key)
            return leftRotate(root);
        if (balance > 1 && key > root.left.key) {
            root.left = leftRotate(root.left);
            return rightRotate(root);
        }
        if (balance < -1 && key < root.right.key) {
            root.right = rightRotate(root.right);
            return leftRotate(root);
        }

        return root;
    }

    // Same delete algorithm you had
    public void delete(int key) {
        root = customDelete(root, key);
    }

    private Node customDelete(Node root, int key) {
        if (root == null) return null;

        if (key < root.key) {
            root.left = customDelete(root.left, key);
        } else if (key > root.key) {
            root.right = customDelete(root.right, key);
        } else {
            if (root.left == null && root.right == null) {
                return null;
            } else if (root.left == null) {
                return root.right;
            } else if (root.right == null) {
                return root.left;
            } else {
                int replacement = findRightmost(root.left);
                root.key = replacement;
                root.left = customDelete(root.left, replacement);
            }
        }

        // Re-balance after delete
        root.height = 1 + Math.max(height(root.left), height(root.right));
        int balance = getBalance(root);

        if (balance > 1 && getBalance(root.left) >= 0)
            return rightRotate(root);
        if (balance > 1 && getBalance(root.left) < 0) {
            root.left = leftRotate(root.left);
            return rightRotate(root);
        }
        if (balance < -1 && getBalance(root.right) <= 0)
            return leftRotate(root);
        if (balance < -1 && getBalance(root.right) > 0) {
            root.right = rightRotate(root.right);
            return leftRotate(root);
        }

        return root;
    }

    private int findRightmost(Node node) {
        while (node.right != null) {
            node = node.right;
        }
        return node.key;
    }

    // Traversals
    public void inorder(Node node) {
        if (node != null) {
            inorder(node.left);
            System.out.print(node.key + " ");
            inorder(node.right);
        }
    }

    public void preorder(Node node) {
        if (node != null) {
            System.out.print(node.key + " ");
            preorder(node.left);
            preorder(node.right);
        }
    }

    public void postorder(Node node) {
        if (node != null) {
            postorder(node.left);
            postorder(node.right);
            System.out.print(node.key + " ");
        }
    }
}

// Main Class
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        BinaryTree tree = new BinaryTree();
        stringToArray convert = new stringToArray();

        while (true) {
            try {
                System.out.print("\nOptions" +
                        "\n1. Insert" +
                        "\n2. Delete" +
                        "\nEnter your Choice: ");
                int inp = sc.nextInt();
                sc.nextLine();

                if (inp == 1) {
                    System.out.print("\nInsert (e.g., [5,3,7,2,4,6,8]): ");
                    String numbers = sc.nextLine();
                    int[] arr = convert.stringToArr(numbers);

                    for (int num : arr) {
                        tree.insert(num);
                    }

                    System.out.println("\nTraversals:");
                    System.out.print("Inorder:   ");
                    tree.inorder(tree.root);
                    System.out.print("\nPreorder:  ");
                    tree.preorder(tree.root);
                    System.out.print("\nPostorder: ");
                    tree.postorder(tree.root);


                } else if (inp == 2) {
                    System.out.print("\nDelete (e.g., [3,7]): ");
                    String delete = sc.nextLine();
                    int[] arr1 = convert.stringToArr(delete);

                    for (int num : arr1) {
                        tree.delete(num);
                    }

                    System.out.println("\nTraversals after deletion:");
                    System.out.print("Inorder:   ");
                    tree.inorder(tree.root);
                    System.out.print("\nPreorder:  ");
                    tree.preorder(tree.root);
                    System.out.print("\nPostorder: ");
                    tree.postorder(tree.root);


                } else {
                    System.out.println("Invalid Input");
                }
            } catch (InputMismatchException e) {
                System.out.println("Invalid Input! Please enter a valid choice.");
                sc.nextLine(); // Clear invalid input
            }
        }
    }
}
